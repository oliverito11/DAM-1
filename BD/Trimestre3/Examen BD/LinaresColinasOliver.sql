            -- EJERCICIO 1 --
    -- A --
CREATE ROLE GRUPO1DAM;

GRANT CREATE_SESSION
    TO GRUPO1DAM;

GRANT SELECT ANY TABLE
    TO GRUPO1DAM;

-- a --
GRANT INSERT, DELETE
    ON T1AF
    TO GRUPO1DAM;

-- b --
REVOKE DELETE
    ON T1AF
    FROM GRUPO1DAM;

-- B --
CREATE USER PROFESOR
    IDENTIFIED BY PROFE1DAW
    DEFAULT TABLESPACE USERS
    TEMPORARY TABLESPACE TEMP;

GRANT GRUPO1DAM
    TO PROFESOR;

GRANT SELECT ANY TABLE
    TO PROFESOR
    WITH ADMIN OPTION;

    -- C --
-- Para demostrarlo, podemos ver el DD, en concreto las tablas de DBA_TAB_PRIVS y DBA_SYS_PRIVS para cada caso correspondiente --

-- b --
SELECT * FROM DBA_TAB_PRIVS WHERE TABLE_NAME LIKE 'T1AF';

-- B --
SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE LIKE 'PROFESOR';

            -- EJERCICIO 2 --
USE OBRAS;
-- Apartado A --
DROP FUNCTION RETORNO;
DELIMITER $

CREATE FUNCTION RETORNO(M CHAR(3)) RETURNS CHAR(3)
    BEGIN
        DECLARE COD CHAR(3);
        SELECT CODC INTO COD
            FROM TRABAJOS
            WHERE CODM LIKE M
            LIMIT 1;
        RETURN COD;
    END$

DELIMITER ;
SELECT RETORNO('M03');

-- APARTADO B --
DROP PROCEDURE PRO_CIU;
DELIMITER $

CREATE PROCEDURE PRO_CIU(IN PCIUDAD VARCHAR(20))
    BEGIN
        DECLARE MAX_CODC INT DEFAULT 0;
        DECLARE EXISTE BOOLEAN DEFAULT TRUE;
        CREATE TABLE IF NOT EXISTS CIUDADES (
            CODC INT(3) DEFAULT 0,
            NOMCIU VARCHAR(20)
        );
        IF((SELECT MAX(CODC) FROM CIUDADES) IS NULL) THEN
            SET MAX_CODC = 1;
        ELSE
            SET MAX_CODC = (SELECT MAX(CODC) FROM CIUDADES) + 1;
        END IF;
        
        IF((SELECT NOMCIU FROM CIUDADES WHERE NOMCIU LIKE PCIUDAD LIMIT 1) IS NULL) THEN
            INSERT INTO CIUDADES
                VALUES(MAX_CODC, PCIUDAD);
        END IF;
    END $

DELIMITER ;
CALL PRO_CIU('ZAMORA');

-- APARTADO C --
DROP PROCEDURE INCREMENTO;
DELIMITER $

CREATE PROCEDURE INCREMENTO(INOUT N INT)
    BEGIN
        DECLARE COND CHAR(3) DEFAULT '';
        DECLARE DONE BOOLEAN DEFAULT FALSE;
        DECLARE CUR CURSOR FOR SELECT CODC FROM TRABAJOS;
        DECLARE CONTINUE HANDLER SQLSTATE '0200' SET DONE = TRUE;
        OPEN CUR;
            FETCH CUR INTO COND;
            WHILE NOT DONE DO
                IF((SELECT CODC FROM TRABAJOS WHERE CODC LIKE COND AND CODM LIKE 'M01') IS NOT NULL)
                    UPDATE FROM CONDUCTORES(CAT) 
                        VALUES((SELECT(CAT) FROM CONDUCTORES WHERE CODC LIKE COND) + N) 
                        WHERE CODC LIKE COND;
                        -- HABRIA QUE COMPROBAR SI ES UN SOLO CONDUCTOR Y DARLO O NO DE ALTA, CAMBIANDO A 1 O NO LA VARIABLE N DEPENDIENDO DEL CASO --
            END WHILE;
        CLOSE CUR;
        
    END $

DELIMITER ;
SET @X = 2;
CALL INCREMENTO(@X);
SELECT @X;