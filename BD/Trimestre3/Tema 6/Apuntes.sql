            -- PROCEDIMIENTO --
-- CREAR PROCEDIMIENTO --
DELIMITER $
DROP PROCEDURE PROSUMA $        -- BORRAR PROCEDIMIENTO
CREATE PROCEDURE PROSUMA(IN N1 INT, IN N2 INT, OUT SUMA INT)
    BEGIN
        SET SUMA = N1 + N2;     -- TODAS LAS SENTENCIAS EMPIEZAN CON SET
    END$
DELIMITER ;

-- PROBAR --
CALL PROSUMA(2, 3, @SU);
SELECT @SU;

-- SUMAR 3 NÚMEROS, PERO QUE UNO DE ELLOS NOS SIRVA COMO SALIDA
DELIMITER $
DROP PROCEDURE PROSUMA $
CREATE PROCEDURE PROSUMA(IN N1 INT, IN N2 INT, INOUT SUMA INT)
    BEGIN
        SET SUMA = N1 + N2 + SUMA;
    END$
DELIMITER ;

-- PROBAR --
SET @SU = 5;
CALL PROSUMA(2, 3, @SU);
SELECT @SU;

            -- FUNCIONES --
-- CREARFUNCIÓN --
DELIMITER $
DROP FUNCTION FUNSUMA $        -- BORRAR PROCEDIMIENTO
CREATE FUNCTION FUNSUMA(N1 INT, N2 INT) RETURNS INT
    BEGIN
        RETURN N1 + N2;     -- TODAS LAS SENTENCIAS EMPIEZAN CON SET
    END$
DELIMITER ;

-- PROBAR FUNCIÓN --
SELECT FUNSUMA(4, 3);

            -- SENTENCIAS --
    -- DECLARACIÓN DE VARIABLES --
-- VARIABLES LOCALES --
-- Todas las declaraciones tienen que ir al principio de la función y seguidas una de otras
DELIMITER $
DROP FUNCTION FUNSUMA $
CREATE FUNCTION FUNSUMA(N1 INT, N2 INT) RETURNS INT
    BEGIN
        DECLARE SUMA INT DEFAULT 0;   -- DECLARACIÓN
        SET SUMA = N1 + N2;  -- ASIGNACIÓN
        RETURN SUMA;
    END$
DELIMITER ;
SELECT FUNSUMA(4, 3);

-- VARIABLES GLOBALES --
DELIMITER $
DROP PROCEDURE PROSUMA $
CREATE PROCEDURE PROSUMA(IN N1 INT, IN N2 INT)
    BEGIN
        SET @SUMA = N1 + N2;
    END$
DELIMITER ;
SELECT @SUMA;
CALL PROSUMA(5, 3);
SELECT @SUMA;

    -- SELECT ... INTO --
DELIMITER $
DROP FUNCTION FUNTOTAR $
CREATE FUNCTION FUNTOTAR() RETURNS INT
    BEGIN
        DECLARE TNA INT;
        SELECT COUNT(*) INTO TNA
            FROM ART;
        RETURN TNA;
    END$
DELIMITER ;
SELECT FUNTOTAR();

    -- IF --
IF CONDICION THEN
    SENTENCIAS
ELSEIF CONDICION THEN
    SENTENCIAS
ELSE
    SENTENCIAS
END IF;

    -- CASE --
CASE V
    WHEN VALOR1 THEN
        SENTENCIAS
    WHEN VALOR2 THEN
        SENTENCIAS;
    ELSE
        SENTENCIAS;
END CASE;

CASE
    WHEN CONDICION THEN
        SENTENCIAS
    WHEN CONDICION THEN
        SENTENCIAS;
    ELSE
        SENTENCIAS;
END CASE;
-- EJERCICIO DE IF Y CASE --
-- DEFINIR UNA FUNCIÓN A LA QUE SE LE PASAN 3 NÚMEROS Y NOS DICE CUÁL ES EL MAYOR --
-- IF SECUENCIALES
DROP FUNCTION MAYOR;
DELIMITER $
CREATE FUNCTION MAYOR(N1 INT, N2 INT, N3 INT) RETURNS INT
    BEGIN
        DECLARE AUX INT DEFAULT 0;
        IF(N1 < N2) THEN
            SET AUX = N2;
            SET N2 = N1;
            SET N1 = AUX;
        END IF;
        IF(N1 < N3) THEN
            SET AUX = N3;
            SET N3 = N1;
            SET N1 = AUX;
        END IF;
        IF(N2 < N3) THEN
            SET AUX = N3;
            SET N3 = N2;
            SET N2 = AUX;
        END IF;

        RETURN N1;
    END$
DELIMITER ;

-- IF ANIDADOS
DROP FUNCTION MAYOR2;
DELIMITER $
CREATE FUNCTION MAYOR2(N1 INT, N2 INT, N3 INT) RETURNS INT
    BEGIN
        DECLARE AUX INT DEFAULT 0;
        IF(N1 > N2 AND N1 > N3) THEN
            SET AUX = N1;
        ELSEIF(N2 > N1 AND N2 > N3) THEN
            SET AUX = N2;
        ELSEIF(N3 > N1 AND N3 > N2) THEN
            SET AUX = N3;
        END IF;

        RETURN AUX;
    END$
DELIMITER ;
SELECT MAYOR2(2, 1, 3);

-- CASE
DROP FUNCTION MAYORCASE;
DELIMITER $
CREATE FUNCTION MAYORCASE(N1 INT, N2 INT, N3 INT) RETURNS INT
    BEGIN
        DECLARE AUX INT DEFAULT 0;
        CASE
            WHEN N1 > N2 AND N1 > N3 THEN
                SET AUX = N1;
            WHEN N2 > N1 AND N2 > N3 THEN
                SET AUX = N2;
            WHEN N3 > N1 AND N3 > N2 THEN
                SET AUX = N3;
        END CASE;
        RETURN AUX;
    END$
DELIMITER ;

SELECT MAYORCASE(1, 2, 3);

-- MOSTRAR: "EL MAYOR ES X"
DROP FUNCTION MAYORSTR;
DELIMITER $
CREATE FUNCTION MAYORSTR(N1 INT, N2 INT, N3 INT) RETURNS TEXT
    BEGIN
        DECLARE AUX TEXT DEFAULT 'EL MAYOR ES ';
        CASE
            WHEN N1 > N2 AND N1 > N3 THEN
                SET AUX = CONCAT(AUX, N1);
            WHEN N2 > N1 AND N2 > N3 THEN
                SET AUX = CONCAT(AUX, N2);
            WHEN N3 > N1 AND N3 > N2 THEN
                SET AUX = CONCAT(AUX, N3);
        END CASE;
        RETURN AUX;
    END$
DELIMITER ;
SELECT MAYORSTR(1, 5, 3);

-- CONTEMPLAR QUE SEAN IGUALES
DROP FUNCTION MAYORIGUALES;
DELIMITER $
CREATE FUNCTION MAYORIGUALES(N1 INT, N2 INT, N3 INT) RETURNS TEXT
    BEGIN
        DECLARE AUX TEXT DEFAULT 'EL MAYOR ES ';
        IF(N1 = N2 AND N1 = N3) THEN
            SET AUX = 'TODOS LOS NÚMEROS SON IGUALES CON EL VALOR DE ';
        ELSEIF(N1 = N2 OR N1 = N3 OR N2 = N3) THEN
            SET AUX = 'HAY DOS NÚMEROS IGUALES. EL MAYOR ES ';
        END IF;
        CASE
            WHEN N1 > N2 AND N1 > N3 THEN
                SET AUX = CONCAT(AUX, N1);
            WHEN N2 > N1 AND N2 > N3 THEN
                SET AUX = CONCAT(AUX, N2);
            WHEN N3 > N1 AND N3 > N2 THEN
                SET AUX = CONCAT(AUX, N3);
            ELSE IF(N1 = N2 AND N1 > N3) THEN
                SET AUX = CONCAT(AUX, N1);
            ELSEIF (N2 = N3 AND N3 > N1) THEN
                SET AUX = CONCAT(AUX, N3);
            ELSE
                SET AUX = CONCAT(AUX, N3);
            END IF;
        END CASE;
        RETURN AUX;
    END$
DELIMITER ;
SELECT MAYORIGUALES(1, 5, 3);

            -- BUCLES --

    -- REPEAT --
-- CREAR UNA VARIABLE LOCAL QUE AUMENTE EN UNO Y LO MUESTRE CUANDO ESTE VARIABLE SEA MAYOR QUE SU VALOR ANTERIOR
DROP PROCEDURE DOREPEAT;
DELIMITER $
CREATE PROCEDURE DOREPEAT(IN P1 INT, OUT SALIDA INT)
    BEGIN
        DECLARE V_LOCAL INT DEFAULT 0;
        REPEAT
            SET V_LOCAL = V_LOCAL + 1;
        UNTIL V_LOCAL > P1 END REPEAT;
        SET SALIDA = V_LOCAL;
    END$
DELIMITER ;
CALL DOREPEAT(100, @X);
SELECT @X;

-- SIN VARIABLE LOCAL --
DROP PROCEDURE REPEAT_NOVAR;
DELIMITER $
CREATE PROCEDURE REPEAT_NOVAR(IN P1 INT, OUT SALIDA INT)
    BEGIN
        SET SALIDA = 0;
        REPEAT
            SET SALIDA = SALIDA + 1;
        UNTIL SALIDA > P1 END REPEAT;
    END$
DELIMITER ;
CALL REPEAT_NOVAR(100, @X);
SELECT @X;

-- CON UNA FUNCIÓN --
DROP FUNCTION DOREPEATFUNC;
DELIMITER $
CREATE FUNCTION DOREPEATFUNC(P1 INT) RETURNS INT
    BEGIN
        DECLARE V_LOCAL INT DEFAULT 0;
        REPEAT
            SET V_LOCAL = V_LOCAL + 1;
        UNTIL V_LOCAL > P1 END REPEAT;
        RETURN V_LOCAL;
    END$
DELIMITER ;
SELECT DOREPEATFUNC(100);

    -- WHILE --
DROP FUNCTION WHILEFUNC;
DELIMITER $
CREATE FUNCTION WHILEFUNC(P1 INT) RETURNS INT
    BEGIN
        DECLARE V_LOCAL INT DEFAULT 0;
        WHILE V_LOCAL <= P1 DO
            SET V_LOCAL = V_LOCAL + 1;
        END WHILE;
        RETURN V_LOCAL;
    END$
DELIMITER ;
SELECT WHILEFUNC(100);